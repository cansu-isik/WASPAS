# -*- coding: utf-8 -*-
"""WASPAS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1evM2uXmLSh1cFLxk4ra9rHoVHll0VMDT

CRITIC IMPLEMENTATION
"""

import pandas as pd
import numpy as np

mobile_full=pd.read_excel('edas_data_python.xlsx')
mobile_full.head()

"""REFERENCE TABLE"""

criteria=['P/E RATIO','M/B RATIO','EPS','DIV. YIELD','DIV. PAYOUT']
types=['cost','cost','benefit','benefit','cost']
mobile_full_v2=mobile_full.iloc[:,1:6]
mobile_full_v2.head()
mobile_full_np=np.array(mobile_full_v2)
print(mobile_full_np)

mobile_full_np.shape

"""STEP 1) """

first_step=np.zeros(shape=(mobile_full_np.shape[0],mobile_full_np.shape[1]))
for i in range(mobile_full_np.shape[0]):
  for j in range(mobile_full_np.shape[1]):

    if types[j]=='benefit':
      n=np.max(mobile_full_np[:, [j]])
      m=mobile_full_np[i][j]/n
    else :
      n=np.min(mobile_full_np[:, [j]])
      m=n/mobile_full_np[i][j]
    first_step[i][j]=+m
first_step=np.nan_to_num(first_step, neginf=0)

first_step.shape

weights=[0.204612160591036, 0.255413512125869 , 0.171691059402842, 0.183224656646261, 0.185058611233991 ]

"""STEP 2) Q1"""

Q1_list=[]
for i in range(first_step.shape[0]):
  prod=[]
  for j in range(first_step.shape[1]):
    m=first_step[i,j]*weights[j]
    prod.append(m)
  n=sum(prod)  
  print(n)
  Q1_list.append(n)

"""STEP 3 ) Q2"""

temp_list=np.zeros(shape=(mobile_full_np.shape[0],mobile_full_np.shape[1]))
for i in range(first_step.shape[0]):
  for j in range(first_step.shape[1]):
    x=first_step[i,j]*-1
    y=x**weights[j]
    temp_list[i][j]=+y*-1
temp_list[np.isnan(temp_list)] = 1 
temp_list[temp_list == 0] = 1

Q2_list=[]
for i in range(temp_list.shape[0]):
  y=1
  for j in range(temp_list.shape[1]):
    x=temp_list[i][j]
    y=y*x
  print(y)
  Q2_list.append(y)

"""STEP 4 ) Q"""

l=0.5
Q_list=[]
for i in range(len(Q1_list)):
  z=(Q1_list[i]*l)+(Q2_list[i]*(1-l))
  Q_list.append(z)

"""STEP 5) Ranking"""

temp=[]
for i in range(len(Q_list)):
  y=Q_list[i]*-1
  temp.append(y)
temp_np=np.array(temp)

import numpy as np
deneme=[]
arr = Q_list*-1
arr2=np.sort(temp_np,axis=0)
f=enumerate(arr2, start=1)
f=list(f)

deneme=pd.DataFrame(f)

deneme[2]=deneme.iloc[:,1]*-1
deneme

deneme=pd.DataFrame(f)
deneme[2]=deneme.iloc[:,1]*-1
deneme=deneme[[0, 2]]
deneme = deneme.rename(columns={2: 1})
deneme.head()

df_mobile_full_np1=mobile_full.iloc[:,0]

df_mobile_full_np1
df_mobile_full_np1=pd.DataFrame(df_mobile_full_np1)

Q_last=pd.DataFrame(Q_list)
df_mobile_full_np1[1]=Q_last[0]
Q_last.head()
df_mobile_full_np1.head()

result = pd.merge(df_mobile_full_np1, 
                      deneme, 
                      on =1, 
                      how ='inner')
result.rename(columns={1:'Q Value',0:'Rank'})